source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R', echo=TRUE)
?read.xlsx
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R')
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R')
cameraDataXlsx <- read.xlsx("data/cameras.xlsx", sheetIndex=1, sep=",", header=TRUE)
head(cameraDataXlsx)
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R')
install.packages("xlsx")
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R', echo=TRUE)
install.packages("xlsx")
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R', echo=TRUE)
?install.packages
source('~/Documents/coursera/Data science/Code/getting and cleaning data/baltimore.R')
install.packages("MASS")
detach("package:xlsx", unload=TRUE)
detach("package:rJava", unload=TRUE)
?iris
library(datasets)
str(iris)
hist(iris$Sepal.Width)
head(iris,6)
hist(iris$Sepal.Width)
?hist
hist(iris$Sepal.Width)
a <- hist(iris$Sepal.Width)
a
hist(iris$Sepal.Width, breaks = 24)
hist(iris$Sepal.Width, breaks = 20)
hist(iris$Sepal.Length, breaks = 24)
hist(iris$Petal.Width, breaks = 20)
hist(iris$Petal.Length, breaks = 24)
c <- c(19, 29.4, 23.9, 18.4, 25.7, 12.1, 23.9, 27.2)
str(c)
summary(c)
var(c)
mean(c)
std(c)
?var
(c - mean(c))^2
sum((c - mean(c))^2)
sum((c - mean(c))^2) / length(c)
sqrt(sum((c - mean(c))^2)) / length(c)
?stdev
sqrt(var(c))
sqrt(sum((c - mean(c))^2) / length(c))
sqrt(sum((c - mean(c))^2) / (length(c)-1)
)
?var
?mean
sqrt(sum((c - mean(c))^2) / length(c)))
median(c)
sqrt(sum((c - mean(c))^2) / length(c))
sqrt(sum((c - mean(c))^2) / (length(c)-1)
)
?var.s
?vars
?var.p
?sd
median(c(4, 2, 6, 5, 1, 2, 3, 4))
install.packages("RMySQL")
?dbConnect
library(RMySQL)
?dbConnect
?cmdscale
??daisy
d <- c("Individual1", 0,0,0,1,1,1)
d <- rbind(d, c("Individual2", 1,1,1,0,1,0))
d <- rbind(d, c("Individual3", 0,1,0,1,1,0))
d <- rbind(d, c("Individual4", 0,0,1,0,1,1))
d <- rbind(d, c("Individual5", 1,1,1,0,0,0))
d
str(d)
d <- as.data.frame(d)
d
d
str(d)
d <- c("Individual1", 0,0,0,1,1,1)
d <- rbind(d, c("Individual2", 1,1,1,0,1,0))
d <- rbind(d, c("Individual3", 0,1,0,1,1,0))
d <- rbind(d, c("Individual4", 0,0,1,0,1,1))
d <- rbind(d, c("Individual5", 1,1,1,0,0,0))
daisy(d)
??daisy
require(cluster)
daisy(d)
daisy(d[,-1])
dd <- as.data.frame(d[,-1])
dd
rownames(dd) <- d[,1]
dd
daisy(dd)
?daisy
daisy(dd, metric="gower")
daisy(dd, metric="euclidian")
daisy(dd, metric="manhattan")
daisy(dd, metric="gower")
daisy(dd)
require(cluster)
d <- c("Individual1", 0,0,0,1,1,1)
d <- rbind(d, c("Individual2", 1,1,1,0,1,0))
d <- rbind(d, c("Individual3", 0,1,0,1,1,0))
d <- rbind(d, c("Individual4", 0,0,1,0,1,1))
d <- rbind(d, c("Individual5", 1,1,1,0,0,0))
dd <- as.data.frame(d[,-1])
rownames(dd) <- d[,1]
daisy(dd)
??dist.binary
?RSiteSearch
??gdist
require(ade4)
?dist.binary
??dist.binary
install.packages("ade4")
require(ade4)
?dist.binary
dist.binary(dd)
str(dd)
d <- c("Individual1", 0,0,0,1,1,1)
d <- rbind(d, c("Individual2", 1,1,1,0,1,0))
d <- rbind(d, c("Individual3", 0,1,0,1,1,0))
d <- rbind(d, c("Individual4", 0,0,1,0,1,1))
d <- rbind(d, c("Individual5", 1,1,1,0,0,0))
dd <- as.data.frame(d[,-1])
rownames(dd) <- d[,1]
dd
str(dd)
?class
?as.data.frame
as.matrix(dd)
?data.frame
data.frame(d)
str(d)
str(data.frame(d))
?colClasses
class(dd[,1:6]) <- "numeric"
class(dd[,1:6]) <- "integer"
dd
unlist(dd[,1:6])
as.numeric(dd[,1:6])
dd
str(dd)
d
str(d)
dnames <- d[,1]
as.numeric(d[,2:7])
as.data.frame(d[,2:7])
dn <- d[,-1]
dn
as.numeric(dn)
as.integer(dn)
dn <- as.integer(dn)
dn
?matrix
d
?data.frame
data.frame(as.integer(d[,2]), as.integer(d[,3]),as.integer(d[,4]),as.integer(d[,5]),as.integer(d[,6]),as.integer(d[,7]),row.names=d[,1])
data.frame(V1=as.integer(d[,2]), V2=as.integer(d[,3]),V3=as.integer(d[,4]),V4=as.integer(d[,5]),V5=as.integer(d[,6]),V6=as.integer(d[,7]),row.names=d[,1])
dd <- data.frame(V1=as.integer(d[,2]), V2=as.integer(d[,3]),V3=as.integer(d[,4]),V4=as.integer(d[,5]),V5=as.integer(d[,6]),V6=as.integer(d[,7]),row.names=d[,1])
dd <- data.frame(V1=as.integer(d[,2]), V2=as.integer(d[,3]),V3=as.integer(d[,4]),V4=as.integer(d[,5]),V5=as.integer(d[,6]),V6=as.integer(d[,7]),row.names=d[,1])
dist.binary(dd)
?dist.binary
dd <- data.frame(V1=as.integer(d[,2]), V2=as.integer(d[,3]),V3=as.integer(d[,4]),V4=as.integer(d[,5]),V5=as.integer(d[,6]),V6=as.integer(d[,7]),row.names=d[,1])
dist.binary(dd, method=2)
source('~/.active-rstudio-document', echo=TRUE)
aggregate(steps~interval, data, mean, na.rm=TRUE)
aggregate(steps~interval, data, sum, na.rm=TRUE)
aggregate(steps~data, data, mean)
aggregate(steps~date, data, mean)
aggregate(steps~date, data, sum)
?mean
aggregate(steps~date, data, sum)
aggregate(steps~date, data, sum)
aggregate(steps~date, data, mean)
aggregate(steps~date, data, FUN=mean)
?aggregate
aggregate(formula=steps~date, data=data, FUN=mean)
aggregate(data$steps, data$date, FUN=mean)
?match.fun
aggregate(steps~date, data, match.fun(mean)
)
summary(data)
?weekdays
?factor
weekdays("2014-5-25")
weekdays(as.Date("2014-5-25")
)
weekdays(as.Date("2014-5-25"))
weekdays(as.Date("2014-5-24"))
weekdays(as.Date("2014-5-24")) %in% ("Saturday", "Sunday")
weekdays(as.Date("2014-5-24")) %in% c("Saturday", "Sunday")
factor(weekdays(data$date[1:10]) %in% c("Saturday", "Sunday"),
levels = c("weekday", "weekend")))
factor(weekdays(data$date[1:10]) %in% c("Saturday", "Sunday"),
levels = c("weekday", "weekend"))
weekdays(data$date[1:10]) %in% c("Saturday", "Sunday"))
weekdays(data$date[1:10]) %in% c("Saturday", "Sunday")
as.character(weekdays(data$date[1:10]) %in% c("Saturday", "Sunday"))
factor(weekdays(data$date[1:10]) %in% c("Saturday", "Sunday"))
??xyplot
?aggregate
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, data, layout=c(1,2))
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, data, layout=c(1,2), type="b")
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
head(stepsperinterval)
str(stepsperinterval)
24*60/5*2
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2))
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2), type="b")
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2), type="l")
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2), type="l")
xyplot(steps~interval, stepsperinterval, layout=c(1,2), type="l")
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
stepsperinterval <- aggregate(steps~interval, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2), type="l")
xyplot(steps~interval, stepsperinterval, layout=c(1,2), type="l")
data <- transform(data, day = factor(weekdays(date) %in% c("Saturday", "Sunday"), labels=c("weekday", "weekend")))
head(data)
stepsperinterval <- aggregate(steps~interval+day, data, match.fun(mean), na.rm=TRUE)
#stepsperinterval <- aggregate(steps~interval, data, match.fun(mean), na.rm=TRUE)
library(lattice)
xyplot(steps~interval | day, stepsperinterval, layout=c(1,2), type="l")
#xyplot(steps~interval, stepsperinterval, layout=c(1,2), type="l")
stepsperinterval <- aggregate(steps~interval, data, match.fun(mean), na.rm=TRUE)
xyplot(steps~interval, stepsperinterval, layout=c(1,2), type="l")
?subset
dataCleaned <- data
averagePerInterval <- function(interval) {
subset <- subset(data, interval == interval, select = steps)
mean(subset, na.rm=TRUE)
}
dataCleaned[is.na(dateCleaned$steps), "steps"] <- averagePerInterval(dataCleaned[is.na(dateCleaned$steps), "interval"])
dataCleaned <- data
averagePerInterval <- function(interval) {
subset <- subset(data, interval == interval, select = steps)
mean(subset, na.rm=TRUE)
}
dataCleaned[is.na(dataCleaned$steps), "steps"] <- averagePerInterval(dataCleaned[is.na(dataCleaned$steps), "interval"])
dataCleaned <- data
averagePerInterval <- function(interval) {
subset <- data[data$interval==interval, "steps"]
mean(subset, na.rm=TRUE)
}
dataCleaned[is.na(dataCleaned$steps), "steps"] <- averagePerInterval(dataCleaned[is.na(dataCleaned$steps), "interval"])
?tapply
averagePerInterval(dataCleaned[is.na(dataCleaned$steps), "interval"])
dataCleaned <- data
averagePerInterval <- function(interval) {
subset <- data[data$interval==interval, "steps"]
m <- mean(subset, na.rm=TRUE)
if (m == 0) m <- 0
m
}
averagePerInterval(dataCleaned[is.na(dataCleaned$steps), "interval"])
tapply(data[1:10,],rep(c(1,2),5), mean, simplify=FALSE)
tapply(data[1:10,1],rep(c(1,2),5), mean, simplify=FALSE)
tapply(data[1:10,1],rep(c(1,2),5), mean, simplify=TRUE)
tapply(data$steps, data$interval, mean, na.rm=TRUE)
tapply(data$steps, data$interval, mean, na.rm=TRUE)[c(2320,2345)]
tapply(data$steps, data$interval, mean, na.rm=TRUE)[c("2320","2345")]
means <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
with(dataCleaned[is.na(dataCleaned$steps), ], steps <- means[as.character(interval)])
head(dataCleaned)
source('~/.active-rstudio-document', echo=TRUE)
head(dataCleaned)
head(means)
head(dataCleaned[is.na(dataCleaned$steps), ]))
head(dataCleaned[is.na(dataCleaned$steps), ])
str(means)
head(as.character(dataCleaned[is.na(dataCleaned$steps), "interval"],)
)
head(as.character(dataCleaned[is.na(dataCleaned$steps), "interval"])
)
head(as.character(dataCleaned[is.na(dataCleaned$steps), "interval"]))
means(head(as.character(dataCleaned[is.na(dataCleaned$steps), "interval"])))
means[head(as.character(dataCleaned[is.na(dataCleaned$steps), "interval"]))]
?with
with(dataCleaned[is.na(dataCleaned$steps), ], means[as.character(interval)])
str(with(dataCleaned[is.na(dataCleaned$steps), ], means[as.character(interval)]))
=8*288
8*288
str(dataCleaned)
with(dataCleaned[is.na(dataCleaned$steps), ], steps <- means[as.character(interval)])
head(dataCleaned)
str(steps)
str(dataCleaned)
str(with(dataCleaned[is.na(dataCleaned$steps), ], means[as.character(interval)]))
?class
dataCleaned <- data
class(dataCleaned$steps) <- "numeric"
str(dataCleaned)
class(dataCleaned$steps) <- "numeric"
str(dataCleaned)
dataCleaned$steps <- as.numeric(dataCleaned$steps)
str(dataCleaned)
dataCleaned <- data
dataCleaned$steps <- as.numeric(dataCleaned$steps)
# Calculate the table of means per interval
means <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
with(dataCleaned[is.na(dataCleaned$steps), ], steps <- means[as.character(interval)])
head(dataCleaned)
str(dataCleaned)
str(means)
data <- read.csv("activity.csv", header=TRUE)
dataCleaned <- data
dataCleaned$steps <- as.numeric(dataCleaned$steps)
# Calculate the table of means per interval
means <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
with(dataCleaned[is.na(dataCleaned$steps), ], steps <- means[as.character(interval)])
head(dataCleaned)
head(means)
dataCleaned[is.na(dataCleaned$steps), "steps"] <- means[as.character(dataCleaned[is.na(dataCleaned$steps), "interval"])]
head(dataCleaned)
dataCleaned <- data
#dataCleaned$steps <- as.numeric(dataCleaned$steps)
# Calculate the table of means per interval
means <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
dataCleaned[is.na(dataCleaned$steps), "steps"] <- means[as.character(dataCleaned[is.na(dataCleaned$steps), "interval"])]
head(dataCleaned)
data <- read.csv("activity.csv", header=TRUE)
dataCleaned <- data
#dataCleaned$steps <- as.numeric(dataCleaned$steps)
# Calculate the table of means per interval
means <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
dataCleaned[is.na(dataCleaned$steps), "steps"] <- means[as.character(dataCleaned[is.na(dataCleaned$steps), "interval"])]
head(dataCleaned)
?hist
missingdata
